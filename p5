#!/usr/bin/env python3
import argparse, fnmatch, os, os.path, re, textwrap, subprocess, sys

def main(argv):
    parser = argparse.ArgumentParser(prog=os.path.basename(argv[0]))
    subparsers = parser.add_subparsers(dest="command", help="Commands")

    def validate_changelist_argument(arg):
        if re.match(r'''@\d+''', arg):
            return arg
        raise RuntimeError("invalid changelist number: %s" % arg)
    def add_changelist_argument(parser):
        parser.add_argument("changelist", metavar="@changelist", type=validate_changelist_argument, default=None, nargs='?',
            help="Sync to this changelist number. Defaults to the most recent changelist.")

    def make_argparser_checkout():
        parser = subparsers.add_parser("checkout", aliases=["co"],
                help="Create workspace and fetch files.",
                description="Creates workspace in the current directory from given clientspec mappings file, and syncs.")
        parser.add_argument("-c", "--client", type=str, metavar="workspace",
                help="Set P4CLIENT for the new workspace. Defaults to `${P4USER}-$(basename $PWD)` (for example, is user name is `john_d` and current directory is `~/Documents/NewProj`, the default workspace name is `john_d-NewProj`). The value is saved into P4CLIENT variable and will be used by all perforce tools (`p4` and `p5` both).")
        parser.add_argument("clientspec_path", type=str,
                help="Depot path or local path to the client workspace mappings file. The value is saved into P5CLIENTSPEC variable and is used later by `update`, `reconcile` and other commands.")
        add_changelist_argument(parser)
        parser.set_defaults(func=cmd_checkout)
    make_argparser_checkout()

    def make_argparser_status():
        parser = subparsers.add_parser("status", aliases=["st"],
            help="Show local changes, including unopened files that were changed/added/removed.",
            description="Show local changes, including unopened files that were changed/added/removed.")
        parser.set_defaults(func=cmd_status)
    make_argparser_status()

    def make_argparser_update():
        parser = subparsers.add_parser("update", aliases=['up'],
                help="Update client view with the latest clientspec mappings then sync.")
        parser.add_argument("-f", "--force", dest="force", action="store_true",
                help="Pass `-f` to `p4 sync`")
        parser.add_argument("-n", "--dry-run", dest="dry", action="store_true",
                help="Preview what would be done.")
        add_changelist_argument(parser)
        parser.set_defaults(func=cmd_update)
    make_argparser_update()

    def make_argparser_reconcile():
        parser = subparsers.add_parser("reconcile", aliases=['re'],
            help="Interactive reconcile",
            description="Generates shell script with `p4 edit/add/delete` command for each changed file. The script is opened in the default $EDITOR; if the editor returns success (0) the script is executed.",
            epilog="Works even with old perforce server that do not support `p4 reconcile`.")
        parser.set_defaults(func=cmd_reconcile)
    make_argparser_reconcile()

    def make_argparser_diff():
        parser = subparsers.add_parser("diff", aliases=['di'],
            help="Show diff, including unopened files.")
        parser.set_defaults(func=cmd_diff)
    make_argparser_diff()

    def make_argparser_merge():
        parser = subparsers.add_parser("merge", aliases=['integrate', "int"],
            help="Create a new changelist, merge/integrate and automatically resolve given changelist or range or changelists, optionally submitting.")
        def validate_revrange_argument(arg):
            if re.match(r'''@\d+''', arg):
                return arg
            raise RuntimeError("invalid changelist number: %s" % arg)
        parser.add_argument("changelists", metavar="@changelist", type=validate_changelist_argument, default=None, nargs='+',
            help="One or more changelists to integrate.")
        parser.add_argument("-b", "--branch-mapping", dest="branch_mapping", required=True,
                help="Use the given branch mapping (p4 integrate -b).")
        parser.add_argument("-r", "--reverse", dest="reverse_mapping", action="store_true",
                help="Reverse the given branch mapping (p4 integrate -r -b).")
        parser.set_defaults(func=cmd_merge)
    make_argparser_merge()

    parser.add_argument("--version", action="version", version="%(prog)s 0.8")
    args = parser.parse_args(argv[1:])

    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()


#
# `p5 init`
#
def cmd_checkout(args):
    verify_p4_present()

    p4info = env.p4info()
    if "*unknown*" != p4info["clientName"]:
        print("error: workspace already exists here (see `p4 info`)", file=sys.stderr)
        raise SystemExit(1)

    try:
        p4config = env.p4config()
    except FileNotFoundError:
        p4config = {}

    # workspace name
    #
    userName = p4info["userName"]
    if args.client:
        if (kp4client in p4config) and args.client != p4config[kp4client]:
            print("`%s` value '%s' conflicts with command line option '%s'." % (kp4client, p4config[kp4client], args.client), file=sys.stderr)
            raise SystemExit(1)
        workspace_name = args.client
        must_save_workspace_name = (kp4client not in p4config)
    elif (kp4client in p4config):
        workspace_name = p4config[kp4client]
        must_save_workspace_name = False
    else:
        workspace_name = userName + "-" + os.path.basename(os.path.abspath(env.getcwd()))
        must_save_workspace_name = True
        for clientProps in env.p4clients():
            if clientProps["client"] == workspace_name:
                print("error: workspace '{workspace_name}' already exists".format(**vars()), file=sys.stderr)
                raise SystemExit(1)

    # path to clientspec file
    #
    assert args.clientspec_path
    if (kp5clientspec in p4config) and args.clientspec_path != p4config[kp5clientspec]:
        print("`%s` is already written into .perforce config and has different value (%s)." % (kp5clientspec, p4config[kp5clientspec]), file=sys.stderr)
        raise SystemExit(1)
    clientspec_path = args.clientspec_path
    must_save_clientspec_path = (kp5clientspec not in p4config)

    # clientspec content
    #
    if clientspec_path.startswith("//"):
        clientspec_content = env.p4print(clientspec_path, changelist=args.changelist)
        if clientspec_content is None:
            if args.changelist:
                print("error: no such file: %s%s" % (clientspec_path, args.changelist), file=sys.stderr)
            else:
                print("error: no such file: %s" % (clientspec_path), file=sys.stderr)
            raise SystemExit(1)
    else:
        if not env.file_exists(clientspec_path):
            print("error: file not found: %s" % (clientspec_path), file=sys.stderr)
            raise SystemExit(1)
        if not os.path.isabs(clientspec_path):
            clientspec_path = os.path.abspath(os.path.join(env.getcwd(), clientspec_path))
        try:
            clientspec_content = env.readfile(clientspec_path)
        except IOError as ex:
            print("error: can not read file: %s" % (ex), file=sys.stderr)
            raise SystemExit(1)

    # filtered mappings
    #
    mappings = mappings_from_clientspec(clientspec_content, workspace_name)

    # workspace definition
    #
    cwd = env.getcwd()
    workspace_def = textwrap.dedent("""\
        Client: {workspace_name}
        Owner: {userName}
        Root: {cwd}
        Options: allwrite noclobber compress unlocked nomodtime rmdir
        View:
        """.format(**vars())) + mappings
    try:
        env.p4client_i(workspace_def)
    except AssertionError as ex:
        print(ex)
        dump_filename = "/tmp/p5workspace.txt"
        open(dump_filename, "w").write(workspace_def)
        print("The attempted workspace definition is written into %s" % dump_filename)
        raise SystemExit(2)

    try:
        # save .perforce
        #
        if must_save_workspace_name or must_save_clientspec_path:
            with open(env.p4config_filename(), "a") as config_file:
                if must_save_workspace_name:
                    print("%s=%s" % (kp4client, workspace_name), file=config_file)
                if must_save_clientspec_path:
                    print("%s=%s" % (kp5clientspec, clientspec_path), file=config_file)

        # sync
        #
        env.p4sync(changelist=args.changelist)
    except:
        env.p4client_d(workspace_name)
        raise

    print("Created workspace:", workspace_name)
    print("Workspace directory:", cwd)
    print("Clientspec:", clientspec_path)
    if args.changelist:
        print("Synced to changelist: %s" % (args.changelist))


#
# `p5 status`
#
def cmd_status(args):
    verify_p4_present()

    edit_part, revert_part, opened_part = inspect(args)

    for status, _, path in edit_part:
        print("{0:>19} {1}".format(status, path))
    for status, _, path in revert_part:
        print("{0:>19} {1}".format(status, path))
    for status, _, path in opened_part:
        print("{0:>19} {1}".format(status, path))


#
# `p5 update`
#
def cmd_update(args):
    verify_p4_present()

    p4info = env.p4info()
    client_name = p4info["clientName"]
    if "*unknown*" == client_name:
        print("error: no workspace here", file=sys.stderr)
        raise SystemExit(1)
    client_root = p4info["clientRoot"]

    try:
        p4config = env.p4config()
    except FileNotFoundError:
        print("error: no perforce config file found", file=sys.stderr)
        raise SystemExit(1)

    if kp5clientspec not in p4config:
        print("error: no {} in config file".format(kp5clientspec), file=sys.stderr)
        raise SystemExit(1)

    postsync_warnings = ""

    # update clientspec
    clientspec_path = p4config[kp5clientspec]
    if clientspec_path.startswith('//'):
        # clientspec is in depot
        #
        must_fetch = True

        # check if this file is mapped to clientview and locally modified, and use local modifications instead
        output = parse_ztag(subprocess.check_output([env.p4_path, "-ztag", "diff", "-sl", clientspec_path], stderr=subprocess.DEVNULL, universal_newlines=True))
        if output and output[0]["status"] != "same":
            clientspec_path = output[0]["clientFile"] # this is local path
            warning = "*** NOTICE: Clientspec is locally modified! Using local file instead: {0}".format(clientspec_path)
            print(warning)
            postsync_warnings += warning + "\n"
            mappings = open(clientspec_path, "r").read()
            must_fetch = False

        output = parse_ztag(subprocess.check_output([env.p4_path, "-ztag", "opened", clientspec_path], stderr=subprocess.DEVNULL, universal_newlines=True))
        if output:
            # note `output[0]["clientFile"]` is NOT local path
            clientspec_path = parse_ztag(subprocess.check_output([env.p4_path, "-ztag", "have", clientspec_path], stderr=subprocess.DEVNULL, universal_newlines=True)) [0] ["path"]
            warning = "*** NOTICE: Clientspec is opened for edit! Using local file instead: {0}".format(clientspec_path)
            print(warning)
            postsync_warnings += warning + "\n"
            mappings = open(clientspec_path, "r").read()
            must_fetch = False

        if must_fetch:
            if args.changelist:
                print("Fetching clientspec from depot: {0} changelist {1}".format(clientspec_path, args.changelist))
            else:
                print("Fetching clientspec from depot: {0}".format(clientspec_path))
            mappings = env.p4print(clientspec_path, changelist=args.changelist)
    else:
        # clientspec is a local file
        #
        mappings = open(clientspec_path, "r").read()

    # replace whatever client name there is with current client name
    mappings = mappings_from_clientspec(mappings, client_name)

    # recreate client
    original_workspace_def = subprocess.check_output([env.p4_path, "client", "-o"], universal_newlines=True)
    needle = "\nView:\n"
    workspace_def = original_workspace_def[:original_workspace_def.find(needle)+len(needle)] + mappings
    try:
        env.p4client_i(workspace_def)
    except AssertionError as ex:
        print(ex)
        dump_filename = "/tmp/p5workspace.txt"
        open(dump_filename, "w").write(workspace_def)
        print("The attempted workspace definition is written into %s" % dump_filename)
        raise SystemExit(2)

    # sync
    try:
        env.p4sync(dry=args.dry, force=args.force, changelist=args.changelist)
    finally:
        # when `-n` flag is used, restore workspace to its previous state (also handles Ctrl+C)
        if args.dry:
            env.p4client_i(original_workspace_def)



#
# `p5 reconcile`
#
def cmd_reconcile(args):
    editor = os.getenv("EDITOR")

    edit_part, revert_part, opened_part = inspect(args)

    if not (edit_part or revert_part):
        print("\nNothing to reconcile.")
        if opened_part:
            print()
            print("The list of already opened files:")
            for status, _, path in opened_part:
                print("{0:>16}   {1}".format(status, path))
        return

    tempy_path = "/tmp/{0}_p5_reconcile.txt".format(os.getenv("USER"))
    tempy = open(tempy_path,"w")
    print(textwrap.dedent("""\
            #!/bin/sh
            #
            # This is a shell script.
            # Save and exit to perform these commands. Edit them as appropriate.
            # Quit without saving to cancel.
            """), end='', file=tempy)

    if not editor:
        editor = "vi"
        print(textwrap.dedent("""\
                # You are running `vi` because EDITOR environment variable is not set. To change editor, add `export EDITOR=<editor-cmd>` to `~/profile`.
                #
                # A short cheat sheet (in case this is your first time):
                #
                # Save and exit = `:wq<Enter>`
                # Exit without saving (to cancel reconcile) = `:q!`
                # Cut line to clipboard = `dd`
                # Paste line = `p` (above) or `P` (below)
                # Select multiple lines = `V`
                #    Cancel selection = `Esc`
                #    Cut selection to clipboard = `d`
                # Undo = `u`
                # Redo = `Ctrl+R`
                """), end='', file=tempy)

    print("\n\n# Mark for add:", file=tempy)
    print("xargs -- p4 add -f <<-FILES_TO_ADD", file=tempy)
    for _, command, path in edit_part:
        if command == "add":
            print("\t" + path, file=tempy)
    print("FILES_TO_ADD", file=tempy)

    print("\n\n# Delete these local files:", file=tempy)
    print("xargs -- rm -fv <<-FILES_TO_LOCALLY_DELETE", file=tempy)
    print("FILES_TO_LOCALLY_DELETE", file=tempy)

    print("\n\n# Check out:", file=tempy)
    print("xargs -- p4 edit <<-FILES_TO_EDIT", file=tempy)
    for _, command, path in edit_part:
        if command == "edit":
            print("\t" + p4escape(path), file=tempy)
    print("FILES_TO_EDIT", file=tempy)

    print("\n\n# Mark for delete:", file=tempy)
    print("xargs -- p4 delete <<-FILES_TO_MARK_DELETED", file=tempy)
    for _, command, path in edit_part:
        if command == "delete":
            print("\t" + p4escape(path), file=tempy)
    print("FILES_TO_MARK_DELETED", file=tempy)

    print("\n\n# Undo changes:", file=tempy)
    print("xargs -- p4 sync -f <<-FILES_TO_UNDO", file=tempy)
    print("FILES_TO_UNDO", file=tempy)

    print("\n\n# Opened but not changed (you should close these files):", file=tempy)
    print("xargs -- p4 revert <<-FILES_TO_REVERT", file=tempy)
    for _, _, path in revert_part:
        print("\t" + path, file=tempy)
    print("FILES_TO_REVERT", file=tempy)

    print("\n\n# For information only. Opened files:\n", file=tempy)
    for status, _, path in opened_part:
        print("# {0:>16}   {1}".format(status, path), file=tempy)

    tempy.close()
    del tempy
    mtime = os.stat(tempy_path).st_mtime
    if os.system("'{0}' '{1}'".format(editor, tempy_path)):
        print("Editor exited with error status, abort.")
    elif mtime == os.stat(tempy_path).st_mtime:
        print("File not saved => aborted. The file is saved at\n\t{0}".format(tempy_path))
    else:
        if 0 == os.system("/bin/sh '{0}'".format(tempy_path)):
            os.unlink(tempy_path)
        else:
            print("Error performing commands, whatever. The file is saved at\n\t{0}".format(tempy_path))



def cmd_diff(args):
    edit_part, revert_part, opened_part = inspect(args)

    paths = '\n'.join(path for _,_,path in edit_part+opened_part).encode('utf-8')

    pager_cmd = os.getenv('P5PAGER') or os.getenv('PAGER') or '/usr/bin/less -R'
    sh = subprocess.Popen("p4 -x - diff -f | %s" % pager_cmd, shell=True, stdin=subprocess.PIPE)
    sh.communicate(paths)



def cmd_merge(args):
    verify_p4_present()

    p4info = env.p4info()
    client_name = p4info["clientName"]
    if "*unknown*" == client_name:
        print("error: no workspace here", file=sys.stderr)
        raise SystemExit(1)

    # get descriptions of given changes
    #
    range_args = [cl+','+cl[1:] for cl in args.changelists]
    changes = parse_ztag(subprocess.check_output([env.p4_path, "-ztag", "changes", "-l"] + range_args, universal_newlines=True))

    # create a new pending changelist
    #
    descriptions = "merging " + ' '.join("@{}".format(change["change"]) for change in changes)
    filtered_descs = []
    for change in changes:
        if change["desc"].lstrip().lower().startswith("followup"):
            continue
        filtered_descs.append(change["desc"])
    if len(filtered_descs) == 0:
        descriptions = descriptions + " " + " ".join(change["desc"] for change in changes) + "\n"
    elif len(filtered_descs) == 1:
        descriptions = descriptions + " " + filtered_descs[0] + "\n"
    else:
        descriptions = descriptions + "\n" + "\n".join("  - "+fd for fd in filtered_descs) + "\n"
    descriptions = textwrap.indent(descriptions, "\t")
    changelist_definition = textwrap.dedent("""\
        Change: new
        Description:
        """.format(**vars())) + descriptions
    #print(changelist_definition)
    pipe = subprocess.Popen([env.p4_path, "change", "-i"], universal_newlines=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (change_created_message, failed_to_create_change_message) = pipe.communicate(input=changelist_definition)
    if 0 != pipe.returncode:
        print("p5: Can't create a new pending changelist.", file=sys.stderr)
        print(failed_to_create_change_message, file=sys.stderr)
        raise SystemExit(pipe.returncode)
    new_cl = re.search(r'''Change (\d+) created''', change_created_message).group(1)
    must_delete_change = True

    try:
        # integrate into that changelist
        intargs = ["-b", args.branch_mapping]
        if args.reverse_mapping:
            intargs += ["-r"]
        intargs += ["-c", new_cl]
        intargs += range_args
        pipe = subprocess.Popen([env.p4_path, "integrate", "-Rs"] + intargs, universal_newlines=True)
        (integrate_stdout, integrate_stderr) = pipe.communicate()
        if 0 != pipe.returncode:
            print("Integrate operation failed.", file=sys.stderr)
            raise SystemExit(retcode)
        must_delete_change = False
        print(change_created_message)

        # client_root = p4info["clientRoot"]
    finally:
        if must_delete_change:
            subprocess.call([env.p4_path, "change", "-d", new_cl], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    subprocess.check_call([env.p4_path, "resolve", "-am", "-c", new_cl], universal_newlines=True)




#
#
#
kp4client = "P4CLIENT"
kp5clientspec = "P5CLIENTSPEC"

kStatusPrefixOpen = "open/"
kStatusNew = "new"
kStatusDelete = "delete"
kStatusUnchanged = "open/unchanged"
# these are defined by `p4`, you can't change them
kStatusMissing = "missing"
kStatusDiff = "diff"
kStatusSame = "same"

def inspect(args):
    verify_p4_present()

    p4info = env.p4info()
    client_name = p4info["clientName"]
    if "*unknown*" == client_name:
        print("error: no workspace here", file=sys.stderr)
        raise SystemExit(1)
    client_root = p4info["clientRoot"]

    statuses = {}

    print("Checking opened files...", file=sys.stderr)
    actionForOpenedWSPath = {rec["clientFile"] : rec["action"] for rec in parse_ztag(subprocess.check_output([env.p4_path, "-ztag", "opened"], universal_newlines=True))}
    if actionForOpenedWSPath:
        for rec in parse_ztag(subprocess.check_output([env.p4_path, "-ztag", "where"] + list(actionForOpenedWSPath.keys()), universal_newlines=True)):
            statuses[p4unescape(rec["path"])] = kStatusPrefixOpen + actionForOpenedWSPath[rec["clientFile"]]

    print("Searching for unchanged files...", file=sys.stderr)
    for rec in parse_ztag(subprocess.check_output([env.p4_path, "-ztag", "diff", "-sr"], universal_newlines=True)):
        if (rec["clientFile"] in statuses) and (statuses[rec["clientFile"]].startswith(kStatusPrefixOpen + 'move')):
            continue
        statuses[rec["clientFile"]] = kStatusUnchanged

    print("Searching for modified and deleted files...", file=sys.stderr)
    for rec in parse_ztag(subprocess.check_output([env.p4_path, "-ztag", "diff", "-sl"], universal_newlines=True)):
        # files returned by previous `p4 opened` check are ignored
        if (rec["clientFile"] in statuses):
            continue
        # {missing | diff | same}
        statuses[rec["clientFile"]] = rec["status"]

    print("Searching for new files...", file=sys.stderr)
    for root, dirs, files in os.walk(client_root):
        for filename in files:
            filepath = os.path.join(root, filename)
            if filepath not in statuses:
                statuses[filepath] = kStatusNew

    # filter statuses with .p4ignore
    print("Filtering...", file=sys.stderr)
    p4ignore = os.path.join(client_root, ".p4ignore")
    ignores = [line.replace(os.sep, '/').strip() for line in open(p4ignore)] if os.path.exists(p4ignore) else []
    while "" in ignores:
        ignores.remove("")
    ignores.append("/" + os.path.basename(env.p4config_filename()))

    edit_part, revert_part, opened_part = [], [], []
    command_from_status = { kStatusMissing : "delete", kStatusDiff : "edit", kStatusNew : "add" }
    destination_from_status = { kStatusMissing : edit_part, kStatusDiff : edit_part, kStatusNew : edit_part }
    for path in sorted(statuses.keys()):
        if (statuses[path] == kStatusSame) or is_ignored('/' + os.path.relpath(path, client_root), ignores):
            continue
        status = statuses[path]

        # ignore resource forks problem with 'apple' file types
        # http://theaccidentalreleaseengineer.blogspot.ru/2007/12/perforce-apple-filetype-and-mysterious.html
        if status == kStatusNew:
            basename = os.path.basename(path)
            dirname = os.path.dirname(path)
            if basename.startswith('%') and (os.path.join(dirname, basename[1:]) in statuses):
                continue

        if status == kStatusUnchanged:
            revert_part.append((status, "revert", path))
        elif status.startswith(kStatusPrefixOpen):
            opened_part.append((status, None, path))
        else:
            edit_part.append((status, command_from_status[status], path))

    return (edit_part, revert_part, opened_part)


#
#
#
class P5Env:
    def __init__(self):
        self.p4_path = "p4"
        self._p4info = None

    def is_p4_present(self):
        try:
            return 0 == subprocess.call([self.p4_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except:
            return False

    def p4info(self):
        if not self._p4info:
            self._p4info = parse_ztag(subprocess.check_output([self.p4_path, "-ztag", "info"], universal_newlines=True)) [0]
        return self._p4info

    def getcwd(self):
        return os.getcwd()

    def p4config_filename(self):
        config_filename = ".perforce"
        if "P4CONFIG" in os.environ:
            config_filename = os.environ["P4CONFIG"]
        p4info = self.p4info()
        clientRoot = p4info["clientRoot"] if "clientRoot" in p4info else os.getcwd()
        return os.path.join(clientRoot, config_filename)

    def p4config(self):
        return parse_config(self.readfile(self.p4config_filename()))

    def p4clients(self):
        return parse_ztag(subprocess.check_output([self.p4_path, "-ztag", "clients", "-u", self.p4info()["userName"]], universal_newlines=True))

    def p4client_d(self, workspace_name):
        subprocess.run([self.p4_path, "client", "-d", workspace_name], universal_newlines=True)

    def p4client_i(self, workspace_definition):
        pipe = subprocess.Popen([self.p4_path, "client", "-i"], universal_newlines=True, stdin=subprocess.PIPE)
        (stdout, stderr) = pipe.communicate(input=workspace_definition)
        assert 0 == pipe.returncode, "`p4 client -i` returned exit code %d" % pipe.returncode

    def p4print(self, depot_path, changelist=None):
        fileRev = (changelist if changelist else "")
        completed_process = subprocess.run([self.p4_path, "print", "-q", p4escape(depot_path) + fileRev], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        if completed_process.stderr.strip():
            return None
        return completed_process.stdout

    def p4sync(self, force=False, dry=False, changelist=None):
        extra_args = []
        if force: extra_args += ["-f"]
        if dry: extra_args += ["-n"]
        if changelist: extra_args += [changelist]
        subprocess.check_call([self.p4_path, "sync"] + extra_args, universal_newlines=True)

    def file_exists(self, path):
        return os.path.exists(path)

    def readfile(self, path):
        return open(path,"r").read()

env = P5Env()

#
#
#
def mappings_from_clientspec(clientspec_content, workspace_name):
    clientspec_content = re.sub(r'''^("?[+\-]?//(?:.*?)\s+"?//)([^/]+)(/.*)$''', r'''\1%s\3''' % workspace_name, clientspec_content, flags=re.M)
    # erase comments and empty lines, and add tabs as needed by `p4 client -i`
    clientspec_content = re.sub(r'''^\s*[;#].*$''', "", clientspec_content, flags=re.M)
    clientspec_content = os.linesep.join([ ("\t"+s) for s in clientspec_content.splitlines() if s.strip()])
    return clientspec_content

def p4escape(path):
    return path.replace("%","%25").replace("@","%40").replace("#","%23").replace("*","%2A")

def parse_config(contentstr):
    rv = {}
    for match in re.finditer(r'''^(?: \s* | \s* \# .* | \s* (\w+) \s* = \s* (.*?) \s* )$''', contentstr, flags=re.M|re.X):
        if match.group(1):
            rv[match.group(1)] = match.group(2)
    return rv

def parse_ztag(contentstr):
    rv = []
    dictobj = {}
    for match in re.finditer(r'''^(?:|... \s (\w+) \s (.*))$''', contentstr, flags=re.M|re.X):
        if match.group(1):
            dictobj[match.group(1)] = match.group(2)
        else:
            if len(dictobj):
                rv.append(dictobj)
            dictobj = {}
    if len(dictobj):
        rv.append(dictobj)
    return rv

def verify_p4_present():
    if not env.is_p4_present():
        print("fatal error: Perforce command line tool `p4` can not be found", file=sys.stderr)
        raise SystemExit(3)

def shellEscape(p):
    if set(p).intersection( set(r'''~!@#$%^&*(){}[]"'\|<>? ''') ):
        return "'" + p.replace("'", "\'\"\'\"\'") + "'"
    return p

def p4unescape(path):
    return path.replace("%40","@").replace("%23","#").replace("%2A","*").replace("%25","%")

def is_ignored(path, ignores):
    basename = os.path.basename(path)
    for patt in ignores:
        # shortcut for speed
        if basename == patt:
            return True
        if '/' in patt:
            # match full path, rooted at client_root

            if patt.endswith('/'):
                if patt.startswith('/') or patt.startswith('*'):
                    if fnmatch.fnmatch(path, patt + '*'):
                        return True
                else:
                    if fnmatch.fnmatch(path, '*/' + patt + '*'):
                        return True
            else:
                if fnmatch.fnmatch(path, patt):
                    return True
        else:
            # match basename only
            if fnmatch.fnmatch(basename, patt):
                return True
    return False


if __name__ == '__main__':
    main(sys.argv)
